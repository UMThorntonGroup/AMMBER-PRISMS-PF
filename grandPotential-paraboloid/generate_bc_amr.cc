

#include "ParaboloidSystem.h"

#include <fstream>
#include <iostream>
#include <json.hpp>
#include <string>
#include <vector>

/**
 * @brief Prints the usage instructions for the program.
 */
void
print_usage()
{
  std::cout
    << "Usage: generate_BC_AMR [OPTIONS]\n"
    << "Options:\n"
    << "  --condition <value>       Set the boundary condition (e.g., \"NATURAL, "
       "PERIODIC, NATURAL, PERIODIC\").\n"
    << "  --lower <value>           Set the lower bound for AMR refinement (default: "
       "0.01).\n"
    << "  --upper <value>           Set the upper bound for AMR refinement (default: "
       "0.99).\n"
    << "  --gradient-lower <value>  Set the gradient lower bound for "
       "concentration-gradient-based AMR refinement.\n"
    << "  --set-gradient-amr        Enable concentration-gradient-based AMR refinement.\n"
    << "  --help                    Display this help message and exit.\n";
}

/**
 * @brief Main function to generate the BC_AMR.prm file
 * @param argc Argument count
 * @param argv Argument vector
 * @return Exit status
 */
int
main(int argc, char *argv[])
{
  // Default conditions
  std::string condition        = "NATURAL";
  double      lower            = 0.01;
  double      upper            = 0.99;
  double      gradient_lower   = 0.01;
  bool        set_gradient_amr = false;

  // Allowed conditions
  const std::vector<std::string> allowed_conditions = {"NATURAL",
                                                       "DIRICHLET",
                                                       "NON_UNIFORM_DIRICHLET",
                                                       "PERIODIC"};

  // Parse command-line arguments
  for (int i = 1; i < argc; ++i)
    {
      std::string arg = argv[i];
      if (arg == "--help")
        {
          print_usage();
          return 0;
        }
      else if (arg == "--condition" && i + 1 < argc)
        {
          condition = argv[++i];
        }
      else if (arg == "--lower" && i + 1 < argc)
        {
          lower = std::stod(argv[++i]);
        }
      else if (arg == "--upper" && i + 1 < argc)
        {
          upper = std::stod(argv[++i]);
        }
      else if (arg == "--gradient-lower" && i + 1 < argc)
        {
          gradient_lower   = std::stod(argv[++i]);
          set_gradient_amr = true;
        }
      else if (arg == "--set-gradient-amr")
        {
          set_gradient_amr = true;
        }
      else
        {
          std::cerr << "Unknown argument: " << arg << std::endl;
          print_usage();
          return 1;
        }
    }

  // Load the JSON file
  nlohmann::json j;
  try
    {
      std::ifstream file("system.json");
      file >> j;
    }
  catch (const std::exception &e)
    {
      std::cerr << "Error reading JSON file: " << e.what() << std::endl;
      return 1;
    }

  // Create the ParaboloidSystem object
  const ParaboloidSystem system(j);

  // Create a file called BC_AMR.prm
  std::ofstream prmFile("BC_AMR.prm");
  if (!prmFile.is_open())
    {
      std::cerr << "Error creating BC_AMR.prm file." << std::endl;
      return 1;
    }

  // Write the header
  prmFile << "# Boundary condition and AMR parameters for ParaboloidSystem\n"
          << "# Generated by generate_bc_amr.cc\n\n";

  // Set the boundary condition for all order parameters and chemical potentials
  for (const std::string &op_name : system.get_order_parameter_names())
    {
      prmFile << "set Boundary condition for variable " << op_name << " = " << condition
              << "\n";
    }
  for (const std::string &comp_name : system.get_component_names())
    {
      std::string var_name = "mu_" + comp_name;
      prmFile << "set Boundary condition for variable " << var_name << " = " << condition
              << "\n";
    }
  prmFile << "\n";

  // Set AMR parameters
  for (const std::string &op_name : system.get_order_parameter_names())
    {
      prmFile << "subsection Refinement criterion: " << op_name
              << "\n"
                 "\tset Criterion type = VALUE\n"
                 "\tset Value lower bound = "
              << lower
              << "\n"
                 "\tset Value upper bound = "
              << upper
              << "\n"
                 "end\n";
    }
  if (set_gradient_amr)
    {
      for (unsigned int i = 0; i < system.comp_names.size(); ++i)
        {
          std::string comp_name     = system.comp_names[i];
          double      lowest_k_well = std::numeric_limits<double>::max();
          for (const auto &phase : system.phases)
            {
              lowest_k_well = std::min(lowest_k_well, phase.comps[i].k_well);
            }
          double      grad_mu_lb = gradient_lower * lowest_k_well;
          std::string var_name   = "mu_" + comp_name;
          prmFile << "subsection Refinement criterion: " << var_name
                  << "\n"
                     "\tset Criterion type = GRADIENT\n"
                     "\tset Gradient magnitude lower bound = "
                  << grad_mu_lb
                  << "\n"
                     "end\n";
        }
    }

  // Close the file
  prmFile.close();
  std::cout << "BC_AMR.prm file generated successfully." << std::endl;

  return 0;
}